package ca.crit.hungryhamster;

import static com.badlogic.gdx.Input.Keys.A;
import static com.badlogic.gdx.Input.Keys.B;
import static com.badlogic.gdx.Input.Keys.C;
import static com.badlogic.gdx.Input.Keys.D;
import static com.badlogic.gdx.Input.Keys.E;
import static com.badlogic.gdx.Input.Keys.F;
import static com.badlogic.gdx.Input.Keys.G;
import static com.badlogic.gdx.Input.Keys.H;
import static com.badlogic.gdx.Input.Keys.I;
import static com.badlogic.gdx.Input.Keys.J;
import static com.badlogic.gdx.Input.Keys.K;
import static com.badlogic.gdx.Input.Keys.L;
import static com.badlogic.gdx.Input.Keys.M;
import static com.badlogic.gdx.Input.Keys.N;
import static com.badlogic.gdx.Input.Keys.NUM_0;
import static com.badlogic.gdx.Input.Keys.NUM_1;
import static com.badlogic.gdx.Input.Keys.NUM_2;
import static com.badlogic.gdx.Input.Keys.NUM_3;
import static com.badlogic.gdx.Input.Keys.NUM_4;
import static com.badlogic.gdx.Input.Keys.NUM_5;
import static com.badlogic.gdx.Input.Keys.NUM_6;
import static com.badlogic.gdx.Input.Keys.NUM_7;
import static com.badlogic.gdx.Input.Keys.NUM_8;
import static com.badlogic.gdx.Input.Keys.NUM_9;
import static com.badlogic.gdx.Input.Keys.O;
import static com.badlogic.gdx.Input.Keys.P;
import static com.badlogic.gdx.Input.Keys.Q;
import static com.badlogic.gdx.Input.Keys.R;
import static com.badlogic.gdx.Input.Keys.S;
import static com.badlogic.gdx.Input.Keys.T;
import static com.badlogic.gdx.Input.Keys.U;
import static com.badlogic.gdx.Input.Keys.V;
import static com.badlogic.gdx.Input.Keys.W;
import static com.badlogic.gdx.Input.Keys.X;
import static com.badlogic.gdx.Input.Keys.Y;
import static com.badlogic.gdx.Input.Keys.Z;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import ca.crit.hungryhamster.resources.time.Time;
import ca.crit.hungryhamster.resources.time.TimeMillis;

public class GameHandler {
    /**
     * --------------------------------------------------------------------------
     *                           COMMUNICATION TO LOGCAT
     * --------------------------------------------------------------------------
     */

    /**
     * --------------------------------------------------------------------------
     *                        GLOBAL DEFINITIONS FOR DEBUG
     * --------------------------------------------------------------------------
    */
    public static final int DEBUG_GAME = 0;
    public static final int DEBUG_MENU = 1;
    public static final int DEBUG_DB = 2;
    public static final int DEBUG_NONE = 3;
    public static final int DEBUG_RESUME = 4;
    public static final int DEBUG_DEMO = 5;
    public static final int DEBUG_MODE = DEBUG_DEMO; //Debug constant
    /**
     * --------------------------------------------------------------------------
     *                              GLOBAL CONSTANTS
     * --------------------------------------------------------------------------
     */
    public enum Screens {
        MenuScreen,
        GameScreen,
        ResumeScreen,
        DemoScreen,
        IsSet
    }
    public static final int LADDER_MAX_STEPS = 16;
    public static final int DESKTOP_ENV = 0;
    public static final int MOBILE_ENV = 1;
    public static final int LEFT_HAND = 2;
    public static final int RIGHT_HAND = 3;
    public static final int BOTH_HANDS = 4;
    public static int WORLD_WIDTH = 72;
    public static int WORLD_HEIGHT = 128;
    //Only applies on stages
    public static int NATIVE_RES_WIDTH = 480;
    public static int NATIVE_RES_HEIGHT = 640;
    public static int NUMBER_OF_STEPS_IN_LADDER = 15; //Considers the zero
    /**
     * --------------------------------------------------------------------------
     *                       CONFIGURATION GLOBAL VARIABLES
     * --------------------------------------------------------------------------
     */
    public static float musicVolume;
    public static float effectsVolume;
    public static int numHouseSteps = 15;
    public static int maxStep;
    public static int minStep;
    public static int extraStep = 0;
    public static int countsToWin = numHouseSteps;
    public static String dataFileName = "Sample.csv"; //TODO Construct the autogenerated file name
    /**
     * --------------------------------------------------------------------------
     *                              GLOBAL VARIABLES
     * --------------------------------------------------------------------------
     */
    public static int environment;
    public static final double animHysteresis = 0.30;
    public static boolean wizardSpell  = false;
    public static Screens currentScreen = Screens.IsSet;
    public static float[] foodPositions;
    public static int nextStep = 0;
    /**
     * --------------------------------------------------------------------------
     *                        PATIENT PERFORMANCE MEASURES
     * --------------------------------------------------------------------------
     */
    public static Time limitSessionTime = new Time(); //Limit time of the session if it exists
    public static Time sessionTime = new Time(); //Duration of the session
    public static TimeMillis meanSessionTimeStep; //Mean time to complete a step per session
    public static List<TimeMillis> meanRepTimeStep = new ArrayList<TimeMillis>(); //List of mean time to complete step per Repetition
    public static List<Time> repsTime = new ArrayList<Time>(); //Time to complete the repetition
    public static int sessionReps = 0; //Completed session repetitions
    public static int sessionUncompletedReps = 0; //Uncompleted repetitions on the session
    public static int successfulSteps = 0; //Successful steps on the session
    public static List<List<TimeMillis>> allTimeInSteps = new ArrayList<>(); //Have lists of all the times of the patient

    /**
     * --------------------------------------------------------------------------
     *                            PATIENT INFORMATION
     * --------------------------------------------------------------------------
     */
    public static String playerID;
    public static String playerName;
    public static String playerGender;
    public static int playerWorkingHand;
    public static int playerAge;
    public static int playerLastNumSteps; //TODO Register the last step configuration
    public static Date currentDate; //TODO Get the current date
    /**
     * --------------------------------------------------------------------------
     *                         GAME INTERFACE & INTERACT
     * --------------------------------------------------------------------------
     */
    public static boolean[] touchPins = new boolean[LADDER_MAX_STEPS];
    public static boolean[] espTouch = new boolean[LADDER_MAX_STEPS];
    public static final int[] key = {
            NUM_0, NUM_1, NUM_2, NUM_3, NUM_4, NUM_5, NUM_6, NUM_7, NUM_8, NUM_9,
            Q, W, E, R, T, Y, U, I, O, P,
            A, S, D, F, G, H, J, K, L,
            Z, X, C, V, B, N, M
    };
    public static final String[] strReceptions = new String[LADDER_MAX_STEPS];
    /**
     * --------------------------------------------------------------------------
     *                                 METHODS
     * --------------------------------------------------------------------------
     */
    public static void init(float musicVolume, int env) {
        //Extract the ID's
        //Setting global variables
        limitSessionTime = new Time();
        GameHandler.musicVolume = musicVolume;
        GameHandler.effectsVolume = musicVolume / 4;
        GameHandler.environment = env;
        Arrays.fill(GameHandler.touchPins, false);
        Arrays.fill(GameHandler.espTouch, false);
        for(int i = 0; i < LADDER_MAX_STEPS; i++)
            strReceptions[i] = "T:" + i;
    }

    public static Time calculateMeanOfTime(List<Time> list) {
        Time meanTime = new Time();
        //Sum of all members
        for(Time time : list)
            meanTime.addTime(time);
        //Dividing
        for(int i = 0; i < list.size()-1; i++) {
            meanTime.subtract(meanTime);
        }
        return meanTime;
    }

    public static TimeMillis calculateMeanOfTimeMillis(List<TimeMillis> list) {
        TimeMillis meanTime = new TimeMillis();
        //Sum of all members
        for(TimeMillis timeMillis : list)
            meanTime.addTime(timeMillis);
        //Dividing
        meanTime.divide(list.size());
        return meanTime;
    }

    public static void disposeAll() {
        //TODO Destroy all classes
    }
}
